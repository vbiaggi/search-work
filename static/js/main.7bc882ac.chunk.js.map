{"version":3,"sources":["components/Header.tsx","components/SearchBar.tsx","components/List.tsx","services/api.js","data/data.ts","components/Select.tsx","components/Body.tsx","screens/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","className","SearchBar","handleChange","value","type","name","id","placeholder","onChange","List","data","map","res","index","key","date","Date","getDate","getMonth","getFullYear","getHours","getMinutes","length","getFormatDate","postedAt","title","countries","company","href","userEmail","target","getQuery","query","api","a","fetch","method","headers","Accept","body","JSON","stringify","then","r","json","catch","err","processData","options","arr","filter","property1","property2","property3","jobs","sort","search","filterByCountry","filterByCompany","direction","property","b","auxSort1","getTime","auxSort2","newDirection","sortData","toLocaleLowerCase","indexOf","filterDataOneProperty","filterDataTwoProperty","Select","htmlFor","obj","Body","useState","searchText","setSearchText","setCountries","companies","setCompanies","worksList","setWorksList","setOptions","getCountries","response","getCompanies","getJobs","setNewOptions","newOptions","newArr","useEffect","e","onClick","Home","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.7bc882ac.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header: React.FC = () => {\r\n  return (\r\n    <header className=\"header\">\r\n      <h2 className=\"sky-blue\">Find yourself in GraphQL</h2>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n// import searchIcon from '../assets/icons/search.svg';\r\n\r\ninterface Props {\r\n  value: string;\r\n  handleChange: any;\r\n}\r\n\r\nconst SearchBar: React.FC<Props> = ({ handleChange, value }) => {\r\n  return (\r\n    <div className=\"search-bar-container\">\r\n      <input\r\n        className=\"search-bar\"\r\n        type=\"text\"\r\n        name=\"\"\r\n        id=\"\"\r\n        placeholder=\"Find your job, find yourself...\"\r\n        onChange={handleChange}\r\n        value={value}\r\n      />\r\n      <i className=\"fas fa-search search-icon\"></i>\r\n    </div>\r\n    \r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n  data: any;\r\n}\r\n\r\nconst List: React.FC<Props> = ({ data }) => {\r\n\r\n\r\n  const getFormatDate = (value: Date) => {\r\n    const date = new Date(value);\r\n\r\n    const day = date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear();\r\n    const hour = date.getHours() + ':' + ((date.getMinutes() + '').length === 1 ? '0' : '') + date.getMinutes()\r\n\r\n    return day + ' ' + hour;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {data.map((res: any, index: number) => {\r\n        return (\r\n          <div key={index} className=\"col-5 list-container\">\r\n            <header>\r\n              <p className=\"list-date\">{getFormatDate(res.postedAt)}</p>\r\n              <p className=\"list-title\">{res.title}</p>\r\n            </header>\r\n            <section>\r\n              {res.countries.length !== 0 && <p><span>Country:  </span>{res.countries[0].name}</p>}\r\n              <p><span>Company:  </span>{res.company.name}</p>\r\n              <div className=\"list-btn-container\">\r\n                <a href={`mailto:${res.userEmail}`} target=\"_blank\">Send request</a>\r\n              </div>\r\n            </section>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","const apiBase = 'https://api.graphql.jobs/';\r\n\r\nconst getQuery = (type) => {\r\n  let query = '';\r\n\r\n  if (type === 'countries') {\r\n    query = `\r\n      {\r\n        countries {\r\n          id\r\n          name\r\n        }\r\n      }\r\n    `;\r\n  } else if (type === 'jobs') {\r\n    query = `\r\n      {\r\n        jobs {\r\n          id\r\n          title\r\n          countries {\r\n            id\r\n            name\r\n          }\r\n          company {\r\n            id\r\n            name\r\n          }\r\n          postedAt\r\n          createdAt\r\n          userEmail\r\n        }\r\n      }\r\n    `;\r\n  } else if (type === 'companies') {\r\n    query = `\r\n      {\r\n        companies {\r\n          id\r\n          name\r\n        }\r\n      }\r\n    `;\r\n  }\r\n  return query;\r\n};\r\n\r\nexport const api = async (type) => {\r\n  return await fetch(apiBase, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      Accept: 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n      query: getQuery(type),\r\n    }),\r\n  })\r\n    .then((r) => r.json())\r\n    .then((data) => data)\r\n    .catch((err) => err);\r\n};\r\n","export const sortData = (arr: Array<Object>, direction: string, property: string) => {\r\n  return arr.sort((a: any, b: any) => {\r\n    const auxSort1 = new Date(a[property]).getTime();\r\n    const auxSort2 = new Date(b[property]).getTime();\r\n    const newDirection = direction === 'desc' ? -1 : 1;\r\n    if (auxSort1 > auxSort2) {\r\n      return 1 * newDirection;\r\n    } else if (auxSort1 < auxSort2) {\r\n      return -1 * newDirection;\r\n    } else {\r\n      return 0;\r\n    }\r\n  });\r\n};\r\n\r\nexport const filterDataOneProperty = (arr: Array<Object>, filter: string, property: string) => {\r\n  if (filter)\r\n    return arr.filter((res: any) => res[property].toLocaleLowerCase().indexOf(filter.toLocaleLowerCase()) > -1);\r\n  else return arr;\r\n};\r\n\r\nexport const filterDataTwoProperty = (arr: Array<Object>, filter: string, property1: string, property2: string) => {\r\n  if (filter)\r\n    return arr.filter(\r\n      (res: any) => res[property1][property2].toLocaleLowerCase().indexOf(filter.toLocaleLowerCase()) > -1,\r\n    );\r\n  else return arr;\r\n};\r\n\r\nexport const filterDataThreeProperty = (\r\n  arr: Array<Object>,\r\n  filter: string,\r\n  property1: string,\r\n  property2: number,\r\n  property3: string,\r\n) => {\r\n  if (filter)\r\n    return arr.filter(\r\n      (res: any) =>\r\n        res[property1].length !== 0 &&\r\n        res[property1][property2][property3].toLocaleLowerCase().indexOf(filter.toLocaleLowerCase()) > -1,\r\n    );\r\n  else return arr;\r\n};\r\n\r\nexport const processData = (options: any) => {\r\n  const { jobs, sort, search, filterByCountry, filterByCompany } = options;\r\n  const filteredByCountry = filterDataThreeProperty(jobs, filterByCountry, 'countries', 0, 'id');\r\n  const filteredByCompany = filterDataTwoProperty(filteredByCountry, filterByCompany, 'company', 'id');\r\n  const searched = filterDataOneProperty(filteredByCompany, search, 'title');\r\n  const sorted = sortData(searched, sort, 'postedAt');\r\n  return sorted;\r\n};\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n  handleChange: any;\r\n  arr: Array<Object>;\r\n  title: string;\r\n}\r\n\r\nconst Select: React.FC<Props> = ({ handleChange, arr, title }) => {\r\n  return (\r\n    <div className=\"filter-container\">\r\n      <label htmlFor=\"\">{title}</label>\r\n      <select name=\"\" id=\"\" onChange={handleChange}>\r\n      <option value=\"\">Todos</option>\r\n      {arr.length !== 0 &&\r\n        arr.map((res: any, index: number) => (\r\n          <option key={index} value={res.id}>\r\n            {res.name}\r\n          </option>\r\n        ))}\r\n    </select>\r\n    </div>\r\n    \r\n  );\r\n};\r\n\r\nexport default Select;\r\n","import React, { ChangeEvent, useState, useEffect } from 'react';\r\nimport SearchBar from './SearchBar';\r\nimport List from './List';\r\nimport { api } from '../services/api';\r\nimport { processData } from '../data/data';\r\nimport Select from './Select';\r\n\r\ninterface Options {\r\n  jobs?: Array<Object>;\r\n  sort?: string;\r\n  filterByCountry?: string;\r\n  filterByCompany?: string;\r\n  search?: string;\r\n}\r\n\r\nconst obj = {\r\n  jobs: [],\r\n  sort: 'desc',\r\n  filterByCountry: '',\r\n  filterByCompany: '',\r\n  search: '',\r\n};\r\n\r\ninterface Props {}\r\n\r\nconst Body: React.FC<Props> = ({}) => {\r\n  const [searchText, setSearchText] = useState<string>('');\r\n  const [countries, setCountries] = useState<any>([]);\r\n  const [companies, setCompanies] = useState<any>([]);\r\n  const [worksList, setWorksList] = useState<any>([]);\r\n  const [options, setOptions] = useState<Options>(obj);\r\n\r\n  const getCountries = async () => {\r\n    const response = await api('countries');\r\n    setCountries(response.data.countries);\r\n  };\r\n\r\n  const getCompanies = async () => {\r\n    const response = await api('companies');\r\n    setCompanies(response.data.companies);\r\n  };\r\n\r\n  const getJobs = async () => {\r\n    const response = await api('jobs');\r\n    setOptions({ ...options, jobs: response.data.jobs });\r\n    setWorksList(response.data.jobs);\r\n  };\r\n\r\n  const setNewOptions = (newOptions: Options) => {\r\n    setOptions(newOptions);\r\n    const newArr = processData(newOptions);\r\n    setWorksList(newArr);\r\n  };\r\n\r\n  const handleSort = () => {\r\n    const newOptions = { ...options, sort: options.sort === 'desc' ? 'asc' : 'desc' };\r\n    setNewOptions(newOptions);\r\n  };\r\n\r\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const value = e.target.value;\r\n    setSearchText(value);\r\n\r\n    const newOptions = { ...options, search: value };\r\n    setNewOptions(newOptions);\r\n  };\r\n\r\n  const handleChangeCountries = (e: ChangeEvent<HTMLSelectElement>) => {\r\n    const value = e.target.value;\r\n    const newOptions = { ...options, filterByCountry: value };\r\n    setNewOptions(newOptions);\r\n  };\r\n\r\n  const handleChangeCompanies = (e: ChangeEvent<HTMLSelectElement>) => {\r\n    const value = e.target.value;\r\n    const newOptions = { ...options, filterByCompany: value };\r\n    setNewOptions(newOptions);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCountries();\r\n    getCompanies();\r\n    getJobs();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"body\">\r\n      <div className=\"options-container\">\r\n        <div className=\"col-s-12 col-7 option option-search-bar\">\r\n          <SearchBar value={searchText} handleChange={handleChange} />\r\n        </div>\r\n        <div className=\"col-s-7 col-3 option filters-container\">\r\n          <p className=\"option-title\">Filter by: </p>\r\n          <div className=\"filters\">\r\n            <Select title=\"Country\" arr={countries} handleChange={handleChangeCountries} />\r\n            <Select title=\"Company\" arr={companies} handleChange={handleChangeCompanies} />\r\n          </div>\r\n        </div>\r\n        <div className=\"col-s-3 col-1 option\">\r\n          <p className=\"option-title\">Sort by:</p>\r\n          <div className=\"sort-container\">\r\n            <label htmlFor=\"\">Posted date</label>\r\n            <a href=\"#\" onClick={handleSort}>\r\n              <i className={`fas  fa-${options.sort !== 'desc' ? 'sort-down' : 'sort-up'} sort-icon`} />\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {worksList.length !== 0 ? (\r\n        <List data={worksList} />\r\n      ) : (\r\n        <div>\r\n          <p>So sorry!</p>\r\n          <p>No jobs found.</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Body;\r\n","import React from 'react';\r\nimport Header from '../components/Header';\r\nimport Body from '../components/Body';\r\n\r\nconst Home: React.FC = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <Body />\r\n    </div>\r\n  );\r\n};\r\nexport default Home;\r\n","import React from 'react';\nimport './styles/Normalize.css';\nimport './styles/App.css';\nimport Home from './screens/Home';\n\nconst App: React.FC = () => {\n  return <Home />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}